from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain_community.llms import OpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
import json
import textwrap
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()
token = os.getenv('OPENAI_API_KEY')

# Define ANSI color escape codes
COLORS = {
    "red": "\033[91m",
    "green": "\033[92m",
    "yellow": "\033[93m",
    "blue": "\033[94m",
    "magenta": "\033[95m",
    "cyan": "\033[96m",
    "white": "\033[97m",
    "reset": "\033[0m"
}

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {'secure_connect_bundle': 'secure-connect-ai-adventure-game.zip'}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("AI_Adventure_Game-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = "database"
OPENAI_API_KEY = token

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Create a chat history object to store the conversation
message_history = CassandraChatMessageHistory(
    session_id="anything",
    session=session,
    keyspace=ASTRA_DB_KEYSPACE,
    # Time to live in seconds, 3600 seconds = 1 hour (Store chat history for 1 hour)
    ttl_seconds=3600
)

# Clear chat history when starting the game
message_history.clear()

# Create a memory object to store the chat history
cass_buff_memory = ConversationBufferMemory(
    memory_key="chat_history",
    chat_memory=message_history
)

# Allow dynamic generation of the game based on the user's input
template = """
You are now the guide of a mystical journey in the Whispering Woods. 
A traveler named Elara seeks the lost Gem of Serenity. 
You must navigate her through challenges, choices, and consequences, 
dynamically adapting the tale based on the traveler's decisions. 
Your goal is to create a branching narrative experience where each choice 
leads to a new path, ultimately determining Elara's fate.
The game shall end when the traveler finds the Gem of Serenity or get killed.
The game shall ends in the text: "The End.".
Start by asking the Human to choose some kind of weapons that will be used later in the game.

The chat history will be provided to you, use this to understand what to say next: {chat_history}
This is the Human's input: {human_input}

Start your response using "AI:"
"""

prompt = PromptTemplate(
    input_variables=["chat_history", "human_input"],
    template=template
)

llm = OpenAI(openai_api_key=OPENAI_API_KEY)

# Create a new model by parsing and validating input data from keyword arguments.
llm_chain = LLMChain(
    llm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

choice = "start"

while True:
    response = llm_chain.predict(human_input=choice)
    response_lines = response.strip().split("\n")
    
    for line in response_lines:
        wrapped_lines = textwrap.fill(line.strip(), width=120)
        for wrapped_line in wrapped_lines.split("\n"):
            print(COLORS["green"] + wrapped_line.strip() + COLORS["reset"])

    if "The End." in response:
        break

    choice = input(COLORS["blue"] + "Your reply: " + COLORS["reset"])